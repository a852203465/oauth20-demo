spring:
  main:
    allow-bean-definition-overriding: true

  profiles:
    active: dev

  cloud:

    loadbalancer:
      retry:
        enabled: true

    gateway:

      discovery:
        locator:
          #  开启注册中心路由功能，实现动态路由
          enabled: true

      # resilience4j全局断路器
      default-filters:
        - name: CircuitBreaker  #使用resilience4j断路器
          args:
            name: fallback #自定义断路器配置
            fallbackUri: forward:/circuitBreaker/fallback #异常跳转 resilience4j中使用的fallbackMethod优先级大于这个

      # id: 在所有路由定义中需要唯一，不能重复
      # uri: lb://** lb://为固定写法，表示开启负载均衡； ** 即服务在Nacos中注册的名字
      # predicates:- Path=/product/** ，规则为/product/** 的请求都还转发至微服务product-service中。
      routes:
        - id: password-mode
          uri: lb://password-mode
          predicates:
            - Path=/password/**
        - id: resource-service
          uri: lb://resource-service
          predicates:
            - Path=/resource/**
        - id: client-mode
          uri: lb://client-mode
          predicates:
            - Path=/client/**


  security:
    urls: /*/oauth/**, /webjars/**, /doc.html, /swagger-resources/**, /*/v3/api-docs, /actuator/**

resilience4j:
  circuitbreaker:
    circuit-breaker-aspect-order: 397
    configs: #通用配置
      default: # 断路器系统默认配置
        #失败率，错误率达到或高于该值则进入open状态
        failureRateThreshold: 50
        #慢调用阀值，请求执行的时间大于该值时会标记为慢调用
        slowCallDurationThreshold: 60s
        #慢调用熔断阀值，当慢调用率达到或高于该值时，进入open状态
        slowCallRateThreshold: 100
        #状态滚动收集器大小，close状态时收集多少请求状态，用于计算失败率。
        slidingWindowSize: 100
        #状态收集器类型
        #COUNT_BASED：根据数量计算，slidingWindowSize为次数
        #TIME_BASED：根据时间计算，slidingWindowSize为秒数
        slidingWindowType: COUNT_BASED
        #计算错误率的最小请求数，不足最小调用次数不会触发任何变化。
        minimumNumberOfCalls: 10
        #是否自动进入halfOpen状态，默认false-一定时间后进入halfopen，ture-需要通过接口执行。
        automaticTransitionFromOpenToHalfOpenEnabled: true
        #进入halfOpen状态时，可以被调用次数，就算这些请求的失败率，低于设置的失败率变为close状态，否则变为open。
        permittedNumberOfCallsInHalfOpenState: 10
        #open状态变为half状态需要等待的时间，即熔断多久后开始尝试访问被熔断的服务。
        waitDurationInOpenState: 60s
        #事件缓冲区大小？？
        eventConsumerBufferSize: 10
        #被计为失败的异常集合，默认情况下所有异常都为失败。
        recordExceptions:
          - java.lang.Exception
        #不会被计为失败的异常集合，优先级高于recordExceptions。
        ignoreExceptions:
          - java.lang.IllegalStateException
    instances: #熔断器类型
      aCustomizer: #使用默认配置
        baseConfig: default
        minimumNumberOfCalls: 3 #计算错误率的最小请求数，不足最小调用次数不会触发任何变化。
        waitDurationInOpenState: 6s #open状态变为half状态需要等待的时间，即熔断多久后开始尝试访问被熔断的服务
        failureRateThreshold: 50 # 以百分比配置失败率阈值。当失败率等于或大于阈值时，断路器状态并关闭变为开启，并进行服务降级

  retry: # 重试
    retry-aspect-order:  396 # 表示Retry优先级(级别高于比如ratelimiter bulkhead timelimiter) 值越小 优先级 越高
    configs:
      default:
        maxRetryAttempts: 3 # 表示最大重试次数
        waitDuration: 500 # 表示下一次重试等待时间，最小为100 ms
        eventConsumerBufferSize: 10 #重试事件缓冲区大小
        enableExponentialBackoff: true #是否开启指数退避抖动算法，当一次调用失败后，如果在相同的时间间隔内发起重试，有可能发生连续的调用失败，因此可以开启指数退避抖动算法
        exponentialBackoffMultiplier: 1.1 # 间隔乘数(场景: 正好每次间隔为1的时候卡顿 它就有用了 间隔就变了 例如 1 1.1 1.21....)
        enableRandomizedWait: false #下次重试的时间间隔是否随机
        retryExceptions: # 需要重试的异常
          - java.lang.Exception
        ignoreExceptions: # 忽略的异常
          - java.lang.IllegalStateException
    instances:
      aCustomizer: #使用默认配置
        baseConfig: default

  timelimiter: # 超时控制器
    configs:
      default:
        timeoutDuration: 3000 # 超时时长, 单位秒
        cancelRunningFuture: true # 发生异常是否关闭线程
    instances:
      aCustomizer: #使用默认配置
        baseConfig: default















